#
# FILE: part2_minimal.py.backup.backup
# WORKING_DIRECTORY: C:/Users/Wales/OneDrive/Desktop/PROGRESSIVE_FRAMEWORK-Set-2/B2 Optimised 16_08_2025
# PURPOSE: Progressive Framework System Component
# CREATOR: Amos Wales - Progressive Framework Pioneer
# UPDATED: 20250819_Progressive-Framework-Integration
# STATUS: ✅ Progressive Framework System File
# BREATHING_FRAMEWORK: 15 Systems ✅ | 615+ Tests ✅ | System Integration ✅
# PROGRESSIVE_FRAMEWORK: Core_System | Confidence: 85 | System Validated ✅
#

#!/usr/bin/env python3
import os
import json
from pathlib import Path
from datetime import datetime

class TemplateGenerationFixer:
    def __init__(self, base_directory):
        self.base_directory = Path(base_directory)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.updated_templates = []
        
    def find_template_files(self):
        print("Scanning for template and generation files...")
        
        template_files = []
        for file_path in self.base_directory.rglob("*.py"):
            if self.contains_generation_logic(file_path):
                template_files.append(file_path)
        
        print(f"Found {len(template_files)} files with generation logic")
        return template_files
    
    def contains_generation_logic(self, file_path):
        try:
            content = file_path.read_text(encoding='utf-8', errors='ignore').lower()
            keywords = ['def generate_', 'def create_', 'template', 'auto_generation']
            matches = sum(1 for keyword in keywords if keyword in content)
            return matches >= 2
        except:
            return False
    
    def create_header_system(self):
        return f'''
# BREATHING FRAMEWORK HEADER INJECTION SYSTEM
# Generated: {self.timestamp}

def generate_breathing_framework_header(filename, system_name="UNASSIGNED"):
    timestamp = "{self.timestamp}"
    return f"""# BREATHING FRAMEWORK FILE

**FILE**: {{filename}}
**SYSTEM**: {{system_name}}
**CREATED**: {{timestamp}}
**STATUS**: ACTIVE

---

## BREATHING FRAMEWORK INTEGRATION

This file is part of the 615+ Test-to-Lesson Breathing Framework.

---

"""

def auto_add_breathing_framework_header(content, filename, system_name="UNASSIGNED"):
    header = generate_breathing_framework_header(filename, system_name)
    return header + content

print("BREATHING FRAMEWORK HEADER SYSTEM LOADED")
'''

    def needs_update(self, template_path):
        try:
            content = template_path.read_text(encoding='utf-8', errors='ignore')
            return "BREATHING FRAMEWORK HEADER INJECTION SYSTEM" not in content
        except:
            return True

    def update_template(self, template_path):
        try:
            if not self.needs_update(template_path):
                return {"status": "skipped", "file": str(template_path)}
            
            original_content = template_path.read_text(encoding='utf-8', errors='ignore')
            header_system = self.create_header_system()
            
            # Add header system at the beginning
            updated_content = header_system + "\n\n" + original_content
            
            template_path.write_text(updated_content, encoding='utf-8')
            self.updated_templates.append(template_path)
            
            return {"status": "success", "file": str(template_path)}
            
        except Exception as e:
            return {"status": "error", "file": str(template_path), "error": str(e)}

    def process_all(self):
        print("PART 2: FIXING TEMPLATE GENERATION FOR FUTURE FILES")
        print("=" * 60)
        
        template_files = self.find_template_files()
        
        if len(template_files) == 0:
            print("No template/generation files found!")
            return {"total": 0, "updated": 0, "message": "No templates found"}
        
        results = []
        for i, template_file in enumerate(template_files, 1):
            print(f"[{i}/{len(template_files)}] {template_file.name}")
            result = self.update_template(template_file)
            results.append(result)
        
        successful = len([r for r in results if r["status"] == "success"])
        
        # Create config file
        config_content = f'''# BREATHING FRAMEWORK CONFIG
# Generated: {self.timestamp}
BREATHING_FRAMEWORK_ENABLED = True
TOTAL_SYSTEMS = 15
TEST_CASES = "615+"
'''
        
        config_path = self.base_directory / f"breathing_framework_config_{self.timestamp}.py"
        config_path.write_text(config_content, encoding='utf-8')
        
        return {
            "total": len(template_files),
            "updated": successful,
            "config_file": str(config_path),
            "results": results
        }

def main():
    import sys
    
    if len(sys.argv) != 2:
        print("Usage: python part2_minimal.py <directory>")
        sys.exit(1)
    
    base_directory = sys.argv[1]
    
    print("BREATHING FRAMEWORK - PART 2 (MINIMAL)")
    print("=" * 50)
    print(f"Directory: {base_directory}")
    print()
    
    fixer = TemplateGenerationFixer(base_directory)
    report = fixer.process_all()
    
    print("\n" + "=" * 50)
    print("COMPLETION SUMMARY")
    print("=" * 50)
    print(f"Template Files Found: {report['total']}")
    print(f"Successfully Updated: {report['updated']}")
    
    if report['updated'] > 0:
        print(f"Config File Created: {report.get('config_file', 'N/A')}")
        print("SUCCESS: Templates now auto-generate headers!")
    else:
        print("INFO: No templates needed updating or none found")
    
    print("\nPART 2 COMPLETE!")

if __name__ == "__main__":
    main()